<?php
    $hello=" Привет, ";
    $nickname="Александр!";
    $hellow="Продолжаем обучение PHP. Кодим.";
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Создание собственных функций. Валидация функций.</title>
    <link rel="stylesheet" type="text/css" href="normalize.css">
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <header class="">
        <?php
            echo "<h3>".$hello.$nickname."</h3>";
            echo "<h3>".$hellow."</h3>";
        ?>
        <h1>Создание собственных функций. Валидация функций</h1>
    </header>
    <div class="descr">
        <h3 class="subtitle">Создание собственной функции и какие есть "подводные камни".</h3>
        <p>
            Функция по своей сути в PHP - это маленькая программа с помощью которой можно выполнить вычисление или действие.
        </p>
        <p>
            <b>Функция</b> - это именованный блок кода, в данном случае на языке PHP, который определяется один раз, а затем может вызываться на исполнение сколько угодно раз.
        </p>
        <p>
            Определение функции выполняется с помощью ключевого слова <b style="color:#FF8C00;">function</b> за которым указываются следующие компоненты:
            <ul>
                <li>
                    <b style="color:#228B22">Идентификатор</b> , определяющий имя функции. Он будет использован для создания новой переменной, которой будет присвоена функция. Имена функций следуют тем же правилам, что и именование переменных.
                </li>
                
                    <i style="color:#FF1493;">Примечание: имена функций не чувствительны к регистру букв.</i>
                
                <li>
                    <b style="color:#228B22;">Пара круглых скобок вокруг списка из нуля или более идентификаторов, разделенных запятыми</b>. Эти идентификаторы будут определять имена параметров функции. В теле функции они используются в качестве локальных переменных.
                </li>
                <li>
                    Пара фигурных скобок с нулем или более инструкций. Эти инструкции составляют тело функции: они выполняются при каждом вызове функции.
                </li>
            </ul>
            Синтаксис определения функции выглядит следующим образом:<br>
            <ul>
                <li>function имя_функции([параметры]) { блок кода }</li>
            </ul>
            где квадратные скобки ([]) означают необязательность.
        </p>
        <p>
            Создадим и напишем простую функцию, которая будет возвращать значение результата:<br>
            <ul>
                <li>?php</li>
                <li>function sum($a, $b){</li>
                <li>return $a+$b;</li>
                <li>}</li>
                <li>echo sum(2, 3);</li>
                <li>?></li>
            </ul>
            Вот собственно и все.
        </p>
        <p>
            Теперь в кратце распишем, что мы сделали:
            <ul>
                <li>С помощью ключевого слова <b>fuction</b> создали функцию и дали ей имя - <b>sum</b>;</li>
                <i style="color:#8B0000;">ВАЖНО - имя функции определяется тем, что она выполняет и пишется на английском языке. Недопускается имя функции не соответствующее её назначению или действию.</i>
                <li>Далее в круглых скобках указали параметры функции <b>sum</b>, а именно переменные - $a и $b;</li>
                <li>Далее написали сам блок кода, т.е. что должна делать эта функция, в нашем случаи она должна сложить значения переменных $a и $b. После чего, сумму значения вывести, т.е. возратить результат.</li>
                <li>После создания функции, с помощью echo мы выводим результат нашей функции в браузере.</li>
                <li>За функцией echo мы пишем непосредственно нашу функцию <b>sum</b>, где в скобках уже указываем значения переменных $a и $b.</li>                
            </ul>
            Теперь пишем нашу фукнцию в PHP коде и смотрим ниже на результат.
        </p>
        <div class="code__php">
            <?php
                function sum($a, $b){
                    return $a + $b;
                }
                echo sum(2, 3);
            ?>
        </div>
        <p>
            В браузере видим результат работы нашей функции <b>sum</b>, а именно сумму от сложения полных чисел 2 и 3.
        </p>
        <i style="color:#8B0000;">
            ВАЖНО - что если сейчас мы укажем строковое значение одного из аргуметов суммы. то на выходе получим значение того аргумета, где целое число или сообщение о неподдерживаемых операндах<br>
            Как пример, если $a = 2, а  $b="string", то на выходе получим 2.
        </i>
        <p> 
            Вот почему необходимо к функции писать код для валидации, т.е. проверки аргументов функции на соответствии заданным параметрам.
        </p>
        <p>
            Чтобы проверить и доказать, что наша функция <b>sum</b> не валидная и допустит ошибку, проведем следующие действия, а имено изменим по очереди значения в наших переменных $a $b, а именно в переменной $a поставим значение "string", т.е. строковое, а в $b будет значение целого числа 3.<br>
            Затем в $a = 4, а в $b="string".<br>
            Вот как это будет в нашем коде:
            <ul>
                <li>?php</li>
                <li>echo sum(2, "string");/li>
                <li>?></li>
            </ul>
            <ul>
                <li>?php</li>
                <li>echo sum("string", 4);</li>
                <li>?></li>
            </ul>
        </p>
        <div class="code__php">
            <?php
            //    echo sum(2, "string");
            ?>
        </div>
        <div class="code__php">
            //<?php
            //    echo sum("string", 4);
            ?>
        </div>
        <p>
            На выохде в браузере видим ошибку. Но чтобы наш код работал, этот  мы закомментим и поэтому будем видить пустые поля :).
        </p>
    </div>
    <div class="descr">
        <h3 class="subtitle">Валидация функции или как нам самим писать код на проверку созданных нами функций.</h3>
        <p>
            Чтобы проверить валидность функции, нам необходимо написать соответсвующий код проверки.
        </p>
        <p>
            Напишем код проверки для нашей вышеуказанной функции <b>sum</b>.
        </p>
        <p>
            Необходимо запомнить, что проверку лучше писать в самой функции, т.е. в блоке кода.
        </p>
        <p>
            И так наш код проверки будет следующим:
            <ul>
                <li>function summ($a, $b){</li>
                <li>$result = false;</li>
                <li>if(!is_numeric($a)){</li>
                <li>$result="Ошибка. Значение переменной 'a' не является числом!";}</li>
                <li>else if(!is_numeric($b)){</li>
                <li>$result="Ошибка. Значение переменной 'b' не является числом!";}</li>
                <li>else {</li>
                <li>$result=$a+$b;</li>
                <li>}</li>
                <li>ruturn $result;</li>
                <li>}</li>
                <li>}</li>
                <li>echo sum(2, "string");</li>
                <li>?></li>
            </ul>
        </p>
        <p>
            Коротко опишем наш код валидации:
            <ul>
                <li>Создали нашу функцию <b>sum</b>;</li>
                <li>В блоке кода пишем, что переменная result будет иметь значение false(ошибка) если;</li>
                <li>В данном случаи используем функцию для работы с переменными - is_numeric, которая проверяет является ли переменная числом или строкой. В нашей функции <b>sum</b> мы поочередно  применили данную функцию к переменным $a и $b;</li>
                <li> Если переменные $a или $b или обе сразу, имеют строковые значения, то мы получим сообщение - "Ошибка. Значение переменной 'a'('b') не является числом!";</li>
                <li>Если оба значения переменных числа, то выполнится сложение и переменная $result возвратит нам сумму значений;</li>
                <li>Последним действием мы проверяем наш код и применяем нашу функцию <b>sum</b> вместе с кодом проверки.</li>
                <li>?></li>
            </ul>
        </p>
        <p>
            Теперь проверим наш код на практике.
        </p>
        <div class="code__php">
            <?php
                function summ($a, $b){
                    $result = false;

                        if(!is_numeric($a)){
                            $result = "Ошибка. Значение переменной 'a' не является числом!";}
                        else if(!is_numeric($b)){
                                $result = "Ошибка. Значение переменной 'b' не является числом!";}
                             else {
                                $result = $a+$b;
                                }
                    return $result;
                }
                
                    echo summ(2, "string");
                    echo "<br>"."<i style='color:#006400;'>"."В этом примере видим, что переменная 'b' не является числом"."</i>";
            ?>
        </div>
        <div class="code__php">
            <?php
                    echo summ("string", 4);
                    echo "<br>"."<i style='color:#006400;'>"."В этом примере видим, что переменная 'a' не является числом"."</i>";
            ?>
        </div> 
        <div class="code__php">
            <?php
                    echo summ(10, 4);
                    echo "<br>"."<i style='color:#006400;'>"."В этом примере видим, что значения обеих переменных являются числами и наша функция вывела(возвратила) нам  их сумму"."</i>";
            ?>
        </div>       
    </div>
</body>
</html>